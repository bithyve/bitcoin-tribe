/* tslint:disable */
/* eslint-disable */
/**
 * RGB Lightning Node
 * This is the OpenAPI specification for the [RGB Lightning Node](https://github.com/RGB-Tools/rgb-lightning-node) APIs.
 *
 * OpenAPI spec version: 0.1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosResponse,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
import { AddressResponse } from '../models';
import { BtcBalanceRequest } from '../models';
import { BtcBalanceResponse } from '../models';
import { EstimateFeeRequest } from '../models';
import { EstimateFeeResponse } from '../models';
import { ListTransactionsRequest } from '../models';
import { ListTransactionsResponse } from '../models';
import { ListUnspentsRequest } from '../models';
import { ListUnspentsResponse } from '../models';
import { SendBtcRequest } from '../models';
import { SendBtcResponse } from '../models';
/**
 * OnChainApi - axios parameter creator
 * @export
 */
export const OnChainApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Get a new Bitcoin address from the internal BDK wallet
     * @summary Get a Bitcoin address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addressPost: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/address`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = accessToken;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Get the node's bitcoin balance for the vanilla and colored wallets
     * @summary Get the BTC balance
     * @param {BtcBalanceRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    btcbalancePost: async (
      body?: BtcBalanceRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/btcbalance`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = accessToken;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Get on-chain fee estimation
     * @summary Get fee estimation
     * @param {EstimateFeeRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    estimatefeePost: async (
      body?: EstimateFeeRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/estimatefee`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = accessToken;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * List the node's on-chain transactions
     * @summary List transactions
     * @param {ListTransactionsRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listtransactionsPost: async (
      body?: ListTransactionsRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/listtransactions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = accessToken;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * List the unspent outputs of the internal BDK wallet
     * @summary List unspents
     * @param {ListUnspentsRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listunspentsPost: async (
      body?: ListUnspentsRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/listunspents`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = accessToken;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Send bitcoins on-chain
     * @summary Send BTC
     * @param {SendBtcRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendbtcPost: async (
      body?: SendBtcRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/sendbtc`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = accessToken;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * OnChainApi - functional programming interface
 * @export
 */
export const OnChainApiFp = function (configuration?: Configuration) {
  return {
    /**
     * Get a new Bitcoin address from the internal BDK wallet
     * @summary Get a Bitcoin address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addressPost(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<AddressResponse>>
    > {
      const localVarAxiosArgs = await OnChainApiAxiosParamCreator(
        configuration,
      ).addressPost(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Get the node's bitcoin balance for the vanilla and colored wallets
     * @summary Get the BTC balance
     * @param {BtcBalanceRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async btcbalancePost(
      body?: BtcBalanceRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<BtcBalanceResponse>>
    > {
      const localVarAxiosArgs = await OnChainApiAxiosParamCreator(
        configuration,
      ).btcbalancePost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Get on-chain fee estimation
     * @summary Get fee estimation
     * @param {EstimateFeeRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async estimatefeePost(
      body?: EstimateFeeRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<EstimateFeeResponse>>
    > {
      const localVarAxiosArgs = await OnChainApiAxiosParamCreator(
        configuration,
      ).estimatefeePost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * List the node's on-chain transactions
     * @summary List transactions
     * @param {ListTransactionsRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listtransactionsPost(
      body?: ListTransactionsRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<ListTransactionsResponse>>
    > {
      const localVarAxiosArgs = await OnChainApiAxiosParamCreator(
        configuration,
      ).listtransactionsPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * List the unspent outputs of the internal BDK wallet
     * @summary List unspents
     * @param {ListUnspentsRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listunspentsPost(
      body?: ListUnspentsRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<ListUnspentsResponse>>
    > {
      const localVarAxiosArgs = await OnChainApiAxiosParamCreator(
        configuration,
      ).listunspentsPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Send bitcoins on-chain
     * @summary Send BTC
     * @param {SendBtcRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sendbtcPost(
      body?: SendBtcRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<SendBtcResponse>>
    > {
      const localVarAxiosArgs = await OnChainApiAxiosParamCreator(
        configuration,
      ).sendbtcPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * OnChainApi - factory interface
 * @export
 */
export const OnChainApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     * Get a new Bitcoin address from the internal BDK wallet
     * @summary Get a Bitcoin address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addressPost(
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<AddressResponse>> {
      return OnChainApiFp(configuration)
        .addressPost(options)
        .then(request => request(axios, basePath));
    },
    /**
     * Get the node's bitcoin balance for the vanilla and colored wallets
     * @summary Get the BTC balance
     * @param {BtcBalanceRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async btcbalancePost(
      body?: BtcBalanceRequest,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<BtcBalanceResponse>> {
      return OnChainApiFp(configuration)
        .btcbalancePost(body, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Get on-chain fee estimation
     * @summary Get fee estimation
     * @param {EstimateFeeRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async estimatefeePost(
      body?: EstimateFeeRequest,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<EstimateFeeResponse>> {
      return OnChainApiFp(configuration)
        .estimatefeePost(body, options)
        .then(request => request(axios, basePath));
    },
    /**
     * List the node's on-chain transactions
     * @summary List transactions
     * @param {ListTransactionsRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listtransactionsPost(
      body?: ListTransactionsRequest,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<ListTransactionsResponse>> {
      return OnChainApiFp(configuration)
        .listtransactionsPost(body, options)
        .then(request => request(axios, basePath));
    },
    /**
     * List the unspent outputs of the internal BDK wallet
     * @summary List unspents
     * @param {ListUnspentsRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listunspentsPost(
      body?: ListUnspentsRequest,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<ListUnspentsResponse>> {
      return OnChainApiFp(configuration)
        .listunspentsPost(body, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Send bitcoins on-chain
     * @summary Send BTC
     * @param {SendBtcRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sendbtcPost(
      body?: SendBtcRequest,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<SendBtcResponse>> {
      return OnChainApiFp(configuration)
        .sendbtcPost(body, options)
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * OnChainApi - object-oriented interface
 * @export
 * @class OnChainApi
 * @extends {BaseAPI}
 */
export class OnChainApi extends BaseAPI {
  /**
   * Get a new Bitcoin address from the internal BDK wallet
   * @summary Get a Bitcoin address
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OnChainApi
   */
  public async addressPost(
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<AddressResponse>> {
    return OnChainApiFp(this.configuration)
      .addressPost(options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   * Get the node's bitcoin balance for the vanilla and colored wallets
   * @summary Get the BTC balance
   * @param {BtcBalanceRequest} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OnChainApi
   */
  public async btcbalancePost(
    body?: BtcBalanceRequest,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<BtcBalanceResponse>> {
    return OnChainApiFp(this.configuration)
      .btcbalancePost(body, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   * Get on-chain fee estimation
   * @summary Get fee estimation
   * @param {EstimateFeeRequest} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OnChainApi
   */
  public async estimatefeePost(
    body?: EstimateFeeRequest,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<EstimateFeeResponse>> {
    return OnChainApiFp(this.configuration)
      .estimatefeePost(body, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   * List the node's on-chain transactions
   * @summary List transactions
   * @param {ListTransactionsRequest} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OnChainApi
   */
  public async listtransactionsPost(
    body?: ListTransactionsRequest,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<ListTransactionsResponse>> {
    return OnChainApiFp(this.configuration)
      .listtransactionsPost(body, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   * List the unspent outputs of the internal BDK wallet
   * @summary List unspents
   * @param {ListUnspentsRequest} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OnChainApi
   */
  public async listunspentsPost(
    body?: ListUnspentsRequest,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<ListUnspentsResponse>> {
    return OnChainApiFp(this.configuration)
      .listunspentsPost(body, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   * Send bitcoins on-chain
   * @summary Send BTC
   * @param {SendBtcRequest} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OnChainApi
   */
  public async sendbtcPost(
    body?: SendBtcRequest,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<SendBtcResponse>> {
    return OnChainApiFp(this.configuration)
      .sendbtcPost(body, options)
      .then(request => request(this.axios, this.basePath));
  }
}
