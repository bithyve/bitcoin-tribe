/* tslint:disable */
/* eslint-disable */
/**
 * RGB Lightning Node
 * This is the OpenAPI specification for the [RGB Lightning Node](https://github.com/RGB-Tools/rgb-lightning-node) APIs.
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { KeysendRequest } from '../models';
import { KeysendResponse } from '../models';
import { ListPaymentsResponse } from '../models';
import { SendPaymentRequest } from '../models';
import { SendPaymentResponse } from '../models';
/**
 * PaymentsApi - axios parameter creator
 * @export
 */
export const PaymentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Send bitcoins and RGB assets to a LN peer spontaneously (without a LN invoice)
         * @summary Send to a peer spontaneously
         * @param {KeysendRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keysendPost: async (body?: KeysendRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/keysend`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List the node's LN payments
         * @summary List payments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listpaymentsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/listpayments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Pay the provided LN invoice
         * @summary Send a payment
         * @param {SendPaymentRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendpaymentPost: async (body?: SendPaymentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sendpayment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentsApi - functional programming interface
 * @export
 */
export const PaymentsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Send bitcoins and RGB assets to a LN peer spontaneously (without a LN invoice)
         * @summary Send to a peer spontaneously
         * @param {KeysendRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keysendPost(body?: KeysendRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KeysendResponse>>> {
            const localVarAxiosArgs = await PaymentsApiAxiosParamCreator(configuration).keysendPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List the node's LN payments
         * @summary List payments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listpaymentsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ListPaymentsResponse>>> {
            const localVarAxiosArgs = await PaymentsApiAxiosParamCreator(configuration).listpaymentsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Pay the provided LN invoice
         * @summary Send a payment
         * @param {SendPaymentRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendpaymentPost(body?: SendPaymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SendPaymentResponse>>> {
            const localVarAxiosArgs = await PaymentsApiAxiosParamCreator(configuration).sendpaymentPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PaymentsApi - factory interface
 * @export
 */
export const PaymentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Send bitcoins and RGB assets to a LN peer spontaneously (without a LN invoice)
         * @summary Send to a peer spontaneously
         * @param {KeysendRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keysendPost(body?: KeysendRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<KeysendResponse>> {
            return PaymentsApiFp(configuration).keysendPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * List the node's LN payments
         * @summary List payments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listpaymentsGet(options?: AxiosRequestConfig): Promise<AxiosResponse<ListPaymentsResponse>> {
            return PaymentsApiFp(configuration).listpaymentsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Pay the provided LN invoice
         * @summary Send a payment
         * @param {SendPaymentRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendpaymentPost(body?: SendPaymentRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<SendPaymentResponse>> {
            return PaymentsApiFp(configuration).sendpaymentPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PaymentsApi - object-oriented interface
 * @export
 * @class PaymentsApi
 * @extends {BaseAPI}
 */
export class PaymentsApi extends BaseAPI {
    /**
     * Send bitcoins and RGB assets to a LN peer spontaneously (without a LN invoice)
     * @summary Send to a peer spontaneously
     * @param {KeysendRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public async keysendPost(body?: KeysendRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<KeysendResponse>> {
        return PaymentsApiFp(this.configuration).keysendPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List the node's LN payments
     * @summary List payments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public async listpaymentsGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<ListPaymentsResponse>> {
        return PaymentsApiFp(this.configuration).listpaymentsGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Pay the provided LN invoice
     * @summary Send a payment
     * @param {SendPaymentRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public async sendpaymentPost(body?: SendPaymentRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<SendPaymentResponse>> {
        return PaymentsApiFp(this.configuration).sendpaymentPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
