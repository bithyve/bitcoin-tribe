/* tslint:disable */
/* eslint-disable */
/**
 * RGB Lightning Node
 * This is the OpenAPI specification for the [RGB Lightning Node](https://github.com/RGB-Tools/rgb-lightning-node) APIs.
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CloseChannelRequest } from '../models';
import { EmptyResponse } from '../models';
import { GetChannelIdRequest } from '../models';
import { GetChannelIdResponse } from '../models';
import { ListChannelsResponse } from '../models';
import { OpenChannelRequest } from '../models';
import { OpenChannelResponse } from '../models';
/**
 * ChannelsApi - axios parameter creator
 * @export
 */
export const ChannelsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Close a LN channel cooperatively or forcibly
         * @summary Close a channel
         * @param {CloseChannelRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closechannelPost: async (body?: CloseChannelRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/closechannel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a channel's ID from its former temporary channel ID
         * @summary Get a channel's ID
         * @param {GetChannelIdRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getchannelidPost: async (body?: GetChannelIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getchannelid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List the node's LN channels
         * @summary List channels
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listchannelsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/listchannels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Open a new LN channel (RGB-enabled when both asset_id and asset_amount are specified). You can optionally provide a 32 bytes temporary channel ID as a hex-encoded string.
         * @summary Open a channel
         * @param {OpenChannelRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openchannelPost: async (body?: OpenChannelRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/openchannel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChannelsApi - functional programming interface
 * @export
 */
export const ChannelsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Close a LN channel cooperatively or forcibly
         * @summary Close a channel
         * @param {CloseChannelRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async closechannelPost(body?: CloseChannelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<EmptyResponse>>> {
            const localVarAxiosArgs = await ChannelsApiAxiosParamCreator(configuration).closechannelPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a channel's ID from its former temporary channel ID
         * @summary Get a channel's ID
         * @param {GetChannelIdRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getchannelidPost(body?: GetChannelIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetChannelIdResponse>>> {
            const localVarAxiosArgs = await ChannelsApiAxiosParamCreator(configuration).getchannelidPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List the node's LN channels
         * @summary List channels
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listchannelsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ListChannelsResponse>>> {
            const localVarAxiosArgs = await ChannelsApiAxiosParamCreator(configuration).listchannelsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Open a new LN channel (RGB-enabled when both asset_id and asset_amount are specified). You can optionally provide a 32 bytes temporary channel ID as a hex-encoded string.
         * @summary Open a channel
         * @param {OpenChannelRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openchannelPost(body?: OpenChannelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OpenChannelResponse>>> {
            const localVarAxiosArgs = await ChannelsApiAxiosParamCreator(configuration).openchannelPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ChannelsApi - factory interface
 * @export
 */
export const ChannelsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Close a LN channel cooperatively or forcibly
         * @summary Close a channel
         * @param {CloseChannelRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async closechannelPost(body?: CloseChannelRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<EmptyResponse>> {
            return ChannelsApiFp(configuration).closechannelPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a channel's ID from its former temporary channel ID
         * @summary Get a channel's ID
         * @param {GetChannelIdRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getchannelidPost(body?: GetChannelIdRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<GetChannelIdResponse>> {
            return ChannelsApiFp(configuration).getchannelidPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * List the node's LN channels
         * @summary List channels
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listchannelsGet(options?: AxiosRequestConfig): Promise<AxiosResponse<ListChannelsResponse>> {
            return ChannelsApiFp(configuration).listchannelsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Open a new LN channel (RGB-enabled when both asset_id and asset_amount are specified). You can optionally provide a 32 bytes temporary channel ID as a hex-encoded string.
         * @summary Open a channel
         * @param {OpenChannelRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openchannelPost(body?: OpenChannelRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<OpenChannelResponse>> {
            return ChannelsApiFp(configuration).openchannelPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChannelsApi - object-oriented interface
 * @export
 * @class ChannelsApi
 * @extends {BaseAPI}
 */
export class ChannelsApi extends BaseAPI {
    /**
     * Close a LN channel cooperatively or forcibly
     * @summary Close a channel
     * @param {CloseChannelRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    public async closechannelPost(body?: CloseChannelRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<EmptyResponse>> {
        return ChannelsApiFp(this.configuration).closechannelPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a channel's ID from its former temporary channel ID
     * @summary Get a channel's ID
     * @param {GetChannelIdRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    public async getchannelidPost(body?: GetChannelIdRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetChannelIdResponse>> {
        return ChannelsApiFp(this.configuration).getchannelidPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List the node's LN channels
     * @summary List channels
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    public async listchannelsGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<ListChannelsResponse>> {
        return ChannelsApiFp(this.configuration).listchannelsGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Open a new LN channel (RGB-enabled when both asset_id and asset_amount are specified). You can optionally provide a 32 bytes temporary channel ID as a hex-encoded string.
     * @summary Open a channel
     * @param {OpenChannelRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    public async openchannelPost(body?: OpenChannelRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<OpenChannelResponse>> {
        return ChannelsApiFp(this.configuration).openchannelPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
