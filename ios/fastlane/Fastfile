# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Push a new dev build to TestFlight"
  lane :dev do

    increment_build_number(xcodeproj: "tribe.xcodeproj")

    get_certificates( # Create or get certificate, and install it
      development: true,
      output_path: "./builds" # Download certificate in the build folder (you don't need to create the folder)
    )

    get_provisioning_profile( # Create or get provisioning profile
      output_path: "./builds",  # Download provisioning profile in the build folder
      filename: "provisioning.mobileprovision" # Rename the local provisioning profile
    )

    update_project_provisioning( # Set the project provisioning profile (related in Xcode to the General > Signing Release section)
      xcodeproj: "tribe.xcodeproj",
      target_filter: "tribe", # Name of your project
      profile: "./builds/provisioning.mobileprovision",
      build_configuration: "Release"
    )

    update_project_team( # Set the right team on your project
      teamid: CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    )

    build_app(workspace: "tribe.xcworkspace", scheme: "tribe_dev", clean: true,
    export_method: "app-store",
    export_options: {
      provisioningProfiles: {
          CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier) => CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier) + " AppStore" # Value of this parameter is the name of the Provisioning Profile. By default, it will be "{bundleId} AppStore"
      }
    },
    build_path: "./builds",
    output_directory: "./builds")
    upload_to_testflight
    clean_build_artifacts
  end

  desc "Push a new live build to TestFlight"
  lane :live do
    # increment_build_number(xcodeproj: "tribe.xcodeproj")

    get_certificates( # Create or get certificate, and install it
      output_path: "./builds" # Download certificate in the build folder (you don't need to create the folder)
    )

    get_provisioning_profile( # Create or get provisioning profile
      output_path: "./builds",  # Download provisioning profile in the build folder
      filename: "tribe_dist.mobileprovision" # Rename the local provisioning profile
    )

    update_project_provisioning( # Set the project provisioning profile (related in Xcode to the General > Signing Release section)
      xcodeproj: "tribe.xcodeproj",
      target_filter: "tribe", # Name of your project
      profile: "./builds/tribe_dist.mobileprovision",
      build_configuration: "Release"
    )

    update_project_team( # Set the right team on your project
      teamid: CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    )

    build_app(workspace: "tribe.xcworkspace", scheme: "tribe", clean: true,
    export_method: "app-store",
    export_options: {
      provisioningProfiles: {
          CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier) => CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier) + " AppStore" # Value of this parameter is the name of the Provisioning Profile. By default, it will be "{bundleId} AppStore"
      }
    },
    build_path: "./builds",
    output_directory: "./builds")
    upload_to_testflight
    clean_build_artifacts
  end

  desc "Push a new live build to TestFlight (GitHub Actions)"
  lane :github_actions_live do
    ENV["FASTLANE_DISABLE_COLORS"] = "1"
    api_key_path = File.expand_path("../fastlane/AuthKey.p8", __dir__)
    api_key = app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
      key_filepath: api_key_path
    )
    get_certificates(api_key: api_key, output_path: "./builds")
    get_provisioning_profile(api_key: api_key, output_path: "./builds", filename: "tribe_dist.mobileprovision")
    update_project_provisioning(
      xcodeproj: "tribe.xcodeproj",
      target_filter: "tribe",
      profile: "./builds/tribe_dist.mobileprovision",
      build_configuration: "Release"
    )
    update_project_team(
      path: "tribe.xcodeproj",
      teamid: ENV["APPLE_TEAM_ID"]
    )
    build_app(
      workspace: "tribe.xcworkspace",
      scheme: "tribe",
      clean: true,
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
          CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier) => "tribe_dist.mobileprovision"
        }
      },
      build_path: "./builds",
      output_directory: "./builds"
    )
    upload_to_testflight(api_key: api_key)
    clean_build_artifacts
    puts "âœ… Live build successfully uploaded to TestFlight! Build Number: #{latest_build}"
  end
end

after_all do |lane|
  buildNumber = get_build_number() 
  slack(message: "Build success :rocket: \nBuild Number: " + buildNumber.to_s)
  end

  # error do |lane, exception|
  #   slack(
  #     message: exception.message,
  #     success:false
  #   )
  # end
